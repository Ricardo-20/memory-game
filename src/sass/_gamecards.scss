@import '_measures';


@mixin size($width, $height) {
    width: $width;
    height: $height;
}


@mixin paddingMargin($padding, $margin) {
    padding: $padding;
    margin: $margin;
}


@mixin border($border, $borderRadius) {
    border: $border;
    border-radius: $borderRadius;
}



// perspective: Determina la distancia entre el plano z=0 y el usuario 
// para dar algo de perspectiva al elemento 3D posicionado. Es decir, 
// nos ayudará a crear un efecto más realista en la animación invertida.

// display: grid : Establece una cuadrícula con ítems en bloque, de forma 
// equivalente a block.

// grid-template-columns: Establece el tamaño de cada columna.

// repeat([núm de veces], [valor o valores]): Representa un fragmento repetido 
// de la lista, permitiendo un gran número de columnas o filas que exhiben un 
// patrón recurrente.
// Parámetros: 
// - 1er parámetro: Número de repeticiones.
// - 2do parámetro: Tamaño. Ancho del elemento.

// minmax(min, max): Define un rango de tamaño mayor o igual que min y menor o 
// igual que max. Se emplea con rejillas CSS.

// justify-items: Alinea cada celda o área dentro del grid container.

// fr(fraction): Simboliza una fracción de espacio restante en el grid.

// position: Especifica cómo un elemento es posicionado en el documento.
// - relative: El elemento es posicionado de acuerdo al flujo normal del 
// documento. Es decir se le asigna la posición por defecto.
// - absolute: El elemento no estará dentro del flujo normal de la página y
// tomará como referencia la ventana del navegador o el elemento posicionado 
// (que tenga cualquier valor de position excepto static) más cercano si es 
// el padre del elemento que queremos posicionar.

// transform: Aplica una transformación 2D o 3D a un elemento. Esta propiedad
// le permite rotar, escalar, mover, sesgar, etc., elementos.

// scale(): Define una transformación que modifica el tamaño de un elemento 
// en el plano 2D. Se especifica con uno o dos valores, que representan la 
// cantidad de escala que se aplicará en cada dirección.
// Sintaxis: scale(sx), scale(sx, sy)
// Parámetros:
// sx: Es un número representando la abscisa del vector de escala.
// sy: Es un número representado la ordenada de la escala del vector. 

// transform-style: Especifica cómo se representan los elementos hijos en el
// espacio 3D.
// Nota: Esta propiedad debe usarse junto con la propiedad transform.
// Valores: flat | preserve-3d | initial | inherit
// - preserve-3d: Especifica que los elementos hijos conservarán su posición 3D.

// transition: Permite cambiar los valores de las propiedades sin problemas, durante
// una duración determinada. Para crear una transición debe especificar lo siguiente:
// - El efecto que desea agregar.
// - La duración del efecto.
// Nota: Si no se especifica la parte de duración, la transición no tendrá efecto, 
// porque el valor predeterminado es 0.

// backface-visibility: Determina si la cara posterior de un elemento es visible de
// frente al usuario. La cara posterior de un elemento siempre es un fondo transpa-
// rente, permitiendo, cuando es visible, que se muestre una imagen espejo de la 
// cara frontal.
// Valores: visible | hidden
// - visible: La cara posterior es visible, permitiendo que la cara frontal se muestre 
// invertida.
// - hidden: La cara posterior no es visible, ocultando la cara frontal.

// rotateY(): Permite rotar un elemento sobre el eje Y en un espacio tridimensional. 

// visibility: Controla la visibilidad del elemento, pero no afecta a como el navegador 
// representa la caja.
// Valores: visible | hidden
// - hidden: Esconde el elemento pero el espacio que ocupa sigue representándose.



.Game {
    display: flex;
    justify-content: center;
    align-items: center;

    section {
        display: grid;
        grid-template-columns: repeat(4, minmax(10%, 1fr));
        justify-items: center;
        perspective: 1000px;

        article {
            cursor: pointer;
            position: relative;
            transform: scale(1);
            transition: transform .5s;
            transform-style: preserve-3d;

            article:active {
                transform: scale(.97);
                transition: transform .2s;
            }

            .front-face {
                @include size(100%, 100%);

                position: absolute;
                backface-visibility: hidden;
                transform: rotateY(180deg);

                img {
                    @include size(100%, 100%);
                    @include border(0, 2px);
                }
            }

            .back-face {
                @include size(100%, 100%);
                background: #ffec55a6;

                img {
                    @include size(100%, 100%);
                }
            }
        }

        .flip {
            transform: rotateY(180deg);
        }

        .hidden {
            visibility: hidden;
        }
    }


    @media (max-width: $blackberry) {
        @include paddingMargin(15px, 0);

        section {
            @include size(95%, auto);

            article {
                @include paddingMargin(0, 3px);

                .front-face {
                    @include border(4px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(4px solid #f9af00b3, 5px);
                }
            }
        }
    }

    @media (min-width: $blackberry) and (max-width: $smartphone) {
        @include paddingMargin(16px, 0);

        section {
            @include size(85%, auto);

            article {
                @include paddingMargin(0, 3px);

                .front-face {
                    @include border(4px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(4px solid #f9af00b3, 5px);
                }
            }
        }
    }

    @media (min-width: $smartphone) and (max-width: $tablet) {
        @include paddingMargin(20px, 0);

        section {
            @include size(70%, auto);

            article {
                @include paddingMargin(0, 3px);

                .front-face {
                    @include border(4px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(4px solid #f9af00b3, 5px);
                }
            }
        }
    }

    @media (min-width: $tablet) and (max-width: $desktop) {
        @include paddingMargin(30px, 0);

        section {
            @include size(60%, auto);

            article {
                @include paddingMargin(0, 5px);

                .front-face {
                    @include border(5px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(5px solid #f9af00b3, 5px);
                }
            }
        }
    }
    
    @media (min-width: $desktop) and (max-width: $smart) {
        @include paddingMargin(30px, 0);

        section {
            @include size(50%, auto);

            article {
                @include paddingMargin(0, 5px);

                .front-face {
                    @include border(5px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(5px solid #f9af00b3, 5px);
                }
            }
        }
    }

    @media (min-width: $smart) {
        @include paddingMargin(30px, 0);

        section {
            @include size(40%, auto);

            article {
                @include paddingMargin(0, 5px);

                .front-face {
                    @include border(5px solid #f9af00b3, 5px);
                }

                .back-face {
                    @include border(5px solid #f9af00b3, 5px);
                }
            }
        }
    }
}
